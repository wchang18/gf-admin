// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"gf-admin/internal/dao/internal"
	"gf-admin/internal/model/entity"
)

// internalUserDao is internal type for wrapping internal DAO implements.
type internalUserDao = *internal.UserDao

// userDao is the data access object for table user.
// You can define custom methods on it to extend its functionality as you wish.
type userDao struct {
	internalUserDao
}

var (
	// User is globally public accessible object for table user operations.
	User = userDao{
		internal.NewUserDao(),
	}
)

// Fill with you ideas below.

func (dao *userDao) CreateUser(user *entity.User) (id int64, err error) {
	res, err := dao.DB().Model(dao.Table()).Data(user).Insert()
	if err != nil {
		return
	}
	id, _ = res.LastInsertId()
	return
}

func (dao *userDao) UpdateUser(user *entity.User) (err error) {
	_, err = dao.DB().Model(dao.Table()).Data(user).
		Where("id", user.Id).
		Update()
	return
}

func (dao *userDao) GetUserById(id int) (user *entity.User, err error) {
	user = new(entity.User)
	err = dao.DB().Model(dao.Table()).Where("id", id).Scan(&user)
	return
}

func (dao *userDao) DeleteUser(id int) (err error) {
	_, err = dao.DB().Model(dao.Table()).
		Where("id", id).
		Data("status", 3).
		Update()
	return
}

func (dao *userDao) GetUserByUsername(username string) (user *entity.User, err error) {
	user = new(entity.User)
	err = dao.DB().Model(dao.Table()).
		Where("username", username).
		Where("status", 1).
		Scan(&user)
	return
}
